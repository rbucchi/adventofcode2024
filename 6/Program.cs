using System.ComponentModel;
using System.Numerics;

var input = @".........#..................#.......#...............#..................................#.....................................#....
..#....................................#...#......#....................#..........................................................
..........................................................#..#.#................#............#....................#...............
...........................................................#......................................................#...............
............................#..........#................................................#............#.#....................#.....
...........#............................#............................................#...........................................#
......#..................#..#...........#.......................#..........#.....................#...........#...#......#.....#...
...#........................................................................................................#.............#.......
.......................#....................................#.....................#...#.#.....##.........................#........
..............#........#..............................................................................#..........#........#.......
.#........................................................................#....#..#....#.....................................#....
..........#.....................#....#.#.......................#................#.#.............#.......#.......#..........#......
......#..#...............................#.###......................................................#...#.........................
...............................................#....................#...#.......................#...........#...#.................
....#...#..#.............#................................................................#.......................................
...............#...#............#....................#.............#................#.......#....#.......................#........
.........#..........................#............#..............................................................#.#...............
..........................##..............................#....................................#..................................
.......#..##.........................#..............#..#......#..............#...............................##...................
.............................................#........................................................................#....#......
.........................#.......#.......#.......##.#.........#...................................................................
#......................................................................................#.......#......#.#................#......#.
...#.............#....#.............#.....................#................................................................#......
...........#.....................#............................#..............................#.....#........#.....................
.................#....#.#............#.....#................#.....................#..#............................................
..........................#......................#...............#.#...#..............................#.........#.................
...........................................................#......................................................#......#........
........#.........................#.................................#.....................................#.......................
....................#........#.....................................#...............#................#.......................#.....
....#...............#.............................................................................................................
##..................................................................................#.....................................#..#....
........................#..............#......#...................................#.........#.......#.....#.....#.................
.........#.............#......................#............#.......................................................#..........#...
.....#...............#......................................................................#.........#..................#........
....................#...#..............#...............#.............#.............#......#..#......#................#......#.....
............#..........................................#.........................................#........#.......................
.......#.....#........#....................#...............#............................................................#.........
..................#..#.............................................#........#..........................................#..........
...................................#...............................................................#.......#................#.#...
.......................#.....#.........#..................##........#.............................................................
.....#.................................................................................#............#........................#....
....#..........#.........#................................#.....................................#..................##.............
.#.........#..............#.................#...............................................#...............................#.....
........................#.......................................................#.....#................#..............#...........
.........................#.............................#.......#..................##..........................................#...
...................#...................#............#......#......................##........................#...#.....#...........
......#......#....#......................................................................................#........................
#............#........##............................#............................................#....#.......#.................#.
...........................................................#..............................................#.......#...#...........
...##...#............#.....#...............#..................#....................#..............#.............................#.
.....................................................................#................................#.......#.................#.
......#......#.......................................................#....#.................#.....................#...#.#....#.#..
...................#.........#..............#.................................#...#.......#.......................................
........##.....#.......#............................#...................................................................#.........
...................................#.........................................................................#...#...........#....
....#.....................................#......................................................#...#..........#.....#...........
..................................................................................................#........#....................#.
.........#....................##.................................#.......................#........#......#......................#.
.....#.....#....#............#..............#....#.........#............#.#...............#.......................#...............
...................................#.......................#..........................#.....................................#....#
..........#....#...........#.........#..............#.....#................................................#.........#............
...#.........#....................................................................................................................
.#.........................#........................................#.....#...................................#.............#.....
.......................#...#...#...#.......##..................##......................................#........................#.
............................................#....#..........................................##............................#.......
..#.................................................................#....#....#....##...........................................#.
.............#........#.#........#.....................##.....................................................#..#................
............................................##.......................................................................##...........
.........#...................#.................................#....#.#.............................#......#.#.#.....#.........#..
.........................#...........#...........#............................................#......#..................#.........
#.............................##...............#..........#...................#......................................#........#...
...................#.............................................................................................#.......#........
..........................................#.#......................................#........#...........##.......................#
...................#........#.#......#....................................#.......#...........................#..................#
......#................................................................................................#..........................
......................###.............#...................#.#...............................................#.....................
.....#......#......#.....#.#..................#.#...#.....................................................................#.......
.............................................#..............#....................##...............................................
.........................................#..#.............#................................................#...................#.#
........#............................#.................................................#..#.......................................
............#.............................#......................................#..........................##...#................
...................#.........#..................................................................#.............#...................
..#..#..............#....................#...................................................................#....................
............................#..................#..................................................................................
.........................#.....................................................................................#...............#..
.........#....................#.#.............##..................#...#...........................................................
........#..............................#..........................................#.#.........................#...................
.#........#....................##.............................................#............#......................................
...#.....................................#......#.#..#.....#............................#.......................................#.
....................#.........................................#.#.................................#.........#................#....
..............#..........#......#.........................#..#..................#..#...................#.................#...#....
................#..........................................#.............................#......#..............#.#...##...........
........................#.....#.......................#...#................#.......#................#.............................
........#..#..........#....#..#.............................................#...................#........#.................#.#....
...........................#.............................................................#..#................................#.#..
...........#.............#........................................#.^.................................................#...........
..........#.#..#......#........................................................................................#....#.............
...............#......#...#....#..................................#.......#.......................................................
..........##...##....#.....................#...#................................................................#......#..........
.............................................#................................................................................###.
........#.......#..........#....#....................#....................#....#.....#............................................
......#.............................................................................#...........##...#......##....................
.......#.............................#............#.......................#............#...#......................................
..#........#.....#......................................................................................................#.........
.....#....#......................#.....................................................................#..........................
.#.......#...........#....#.......#..............#...#..............#........#..........##.....#......#.................#.........
.............#.#....................................................#........#..............#.....#......................#...#....
...........#.............................................#...........................#.........##................#..#.....#.......
.........................................#.................................................................#.......#.#............
...............#....................#..........................#.............#......#....#...#..............#..................#..
........#...............#.........................................................................................................
..............................#............................#.#...................................#........#................#......
...........#........#.............................#...............................#................#.............#........#.......
.............................#...#..#...........#...........#.............................#..............................#........
......................................................................................................................#........#..
..............##...........#..........................................#...#..............#........................................
..............#.................#......................................................#..#........#..........................#...
..............................................#.......................#........................................................#..
.................#..#...................#..............................#.......................................#.#......#.........
...........#..........#................#.............#...................................................#.......#.....#..........
...#...#...............................................................................................#................#..#.#.#..
...#.....................................................................................#...............................#........
..........................#............................#.#..#..................#.#.......................#.#................##...#
...............................................................................................#....##............................
............................................#....................#....................................................#...........
...............#.......#...#.................................#.......................................#...#..#.#...................
.......#.....#.....#..................#..............#................#..........#........#.......................................
...#...#..........##....................#.......#.......#...........................#....................................#.....#..
..................................................#...#.#...#.........#.#.#.......##.....##.................................#.....
...#..#..........................#..#...........................#...............#.....#.......#............................#......
";

//input = @"....#.....
//.........#
//..........
//..#.......
//.......#..
//..........
//.#..^.....
//........#.
//#.........
//......#...";




string[] lines = input.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);

int rowCount = lines.Length;
if (rowCount == 0)
{
    Console.WriteLine("Input is empty.");
    return;
}

int colCount = lines[0].Length;
foreach (var line in lines)
{
    if (line.Length != colCount)
    {
        Console.WriteLine("All lines must have the same number of characters.");
        return;
    }
}

char[,] matrix = new char[rowCount, colCount];
int[,] matrixDistinctPositions = new int[rowCount, colCount];
(int? positionX, int? positionY) = (null, null);
(int? startingX, int? startingY) = (null, null);
string? direction = null;
for (int i = 0; i < rowCount; i++)
{
    for (int j = 0; j < colCount; j++)
    {
        matrix[i, j] = lines[i][j];
        if (matrix[i, j] == '>')
        {
            positionX = i;
            positionY = j;
            direction = "right";
        }
        if (matrix[i, j] == 'v')
        {
            positionX = i;
            positionY = j;
            direction = "bottom";
        }
        if (matrix[i, j] == '<')
        {
            positionX = i;
            positionY = j;
            direction = "left";
        }
        if (matrix[i, j] == '^')
        {
            positionX = i;
            positionY = j;
            direction = "top";
        }
    }
}
Console.WriteLine("Matrix of Letters:");
for (int i = 0; i < rowCount; i++)
{
    for (int j = 0; j < colCount; j++)
    {
        Console.Write(matrix[i, j] + " ");
    }
    Console.WriteLine();
}

var found = true;
var totalLoop = 0;

startingX = positionX;
startingY = positionY;
string startingDirection = direction;
for (int j = 0; j < rowCount; j++)
{
    for (int k = 0; k < colCount; k++)
    {
        if (matrix[j, k] == '.')
        {
            matrix[j, k] = 'O';
            //for (int i = 0; i < rowCount; i++)
            //{
            //    for (int x = 0; x < colCount; x++)
            //    {
            //        Console.Write(matrix[i, x] + " ");
            //    }
            //    Console.WriteLine();
            //}
            //totalLoop++;
            var metO = 0;
            positionX = startingX;
            positionY = startingY;
            direction = startingDirection;
            found = true;
            matrixDistinctPositions = new int[rowCount, colCount];
            var maxSteps = 10000;
            var steps = 0;
            while (found && metO <= 1 && steps < maxSteps && matrixDistinctPositions[positionX.Value, positionY.Value] < 10)
            {
                steps++;
                var previousX = positionX;
                var previousY = positionY;
                found = false;
                switch (direction)
                {
                    case "left":
                        {
                            if (ShouldContinue(positionX.Value, rowCount, positionY.Value, colCount))
                                if (matrix[positionX.Value, positionY.Value - 1] == '#' || matrix[positionX.Value, positionY.Value - 1] == 'O')
                                {
                                    if (matrix[positionX.Value, positionY.Value - 1] == 'O') metO++;
                                    direction = "top";
                                    found = true;
                                }
                                else
                                {
                                    positionY--;
                                    if (positionY != -1 && positionY < colCount) found = true;
                                    //if (!matrixDistinctPositions[positionX.Value, positionY.Value] && found) matrixDistinctPositions[positionX.Value, positionY.Value] = true;
                                    matrixDistinctPositions[positionX.Value, positionY.Value]++;
                                }
                        }
                        break;
                    case "top":
                        {
                            if (ShouldContinue(positionX.Value, rowCount, positionY.Value, colCount))
                                if (matrix[positionX.Value - 1, positionY.Value] == '#' || matrix[positionX.Value - 1, positionY.Value] == 'O')
                                {
                                    if (matrix[positionX.Value - 1, positionY.Value] == 'O') metO++;
                                    direction = "right";
                                    found = true;
                                }
                                else
                                {
                                    positionX--;
                                    if (positionX != -1 && positionX < rowCount) found = true;

                                    //if (!matrixDistinctPositions[positionX.Value, positionY.Value] && found) matrixDistinctPositions[positionX.Value, positionY.Value] = true;
                                    matrixDistinctPositions[positionX.Value, positionY.Value]++;
                                }
                        }
                        break;
                    case "right":
                        {
                            if (ShouldContinue(positionX.Value, rowCount, positionY.Value, colCount))
                                if (matrix[positionX.Value, positionY.Value + 1] == '#' || matrix[positionX.Value, positionY.Value + 1] == 'O')
                                {
                                    if (matrix[positionX.Value, positionY.Value + 1] == 'O') metO++;
                                    direction = "bottom";
                                    found = true;
                                }
                                else
                                {
                                    positionY++;
                                    if (positionY != -1 && positionY < colCount) found = true;

                                    //if (!matrixDistinctPositions[positionX.Value, positionY.Value] && found) matrixDistinctPositions[positionX.Value, positionY.Value] = true;
                                    matrixDistinctPositions[positionX.Value, positionY.Value]++;
                                }

                        }
                        break;
                    case "bottom":
                        {
                            if (direction == "bottom")
                            {
                                if (ShouldContinue(positionX.Value, rowCount, positionY.Value, colCount))
                                    if (matrix[positionX.Value + 1, positionY.Value] == '#' || matrix[positionX.Value + 1, positionY.Value] == 'O')
                                    {
                                        if (matrix[positionX.Value + 1, positionY.Value] == 'O') metO++;
                                        direction = "left";
                                        found = true;
                                    }
                                    else
                                    {
                                        positionX++;
                                        if (positionX != -1 && positionX < rowCount) found = true;

                                        //if (!matrixDistinctPositions[positionX.Value, positionY.Value] && found) matrixDistinctPositions[positionX.Value, positionY.Value] = true;
                                        matrixDistinctPositions[positionX.Value, positionY.Value]++;
                                    }
                            }
                        }
                        break;
                    default:
                        break;
                }


                matrix[previousX.Value, previousY.Value] = '.';
                if (direction == "top") matrix[positionX.Value, positionY.Value] = '^';
                if (direction == "bottom") matrix[positionX.Value, positionY.Value] = 'v';
                if (direction == "right") matrix[positionX.Value, positionY.Value] = '>';
                if (direction == "left") matrix[positionX.Value, positionY.Value] = '<';
                //Console.WriteLine();

                //for (int i = 0; i < rowCount; i++)
                //{
                //    for (int x = 0; x < colCount; x++)
                //    {
                //        Console.Write(matrix[i, x] + " ");
                //    }
                //    Console.WriteLine();
                //}
            }
            if (metO > 1)
            {
                //Console.WriteLine("FOUND: ");

                //for (int i = 0; i < rowCount; i++)
                //{
                //    for (int x = 0; x < colCount; x++)
                //    {
                //        Console.Write(matrix[i, x] + " ");
                //    }
                //    Console.WriteLine();
                //}
                totalLoop++;
            }
            matrix[positionX.Value, positionY.Value] = '.';
            matrix[j, k] = '.';
        }
    }
}
var total = 0;
//for (int i = 0; i < rowCount; i++)
//{
//    for (int j = 0; j < colCount; j++)
//    {
//        if (matrixDistinctPositions[i, j]) total++;
//        if (matrixDistinctPositions[i, j]) Console.Write("X");
//        if (!matrixDistinctPositions[i, j]) Console.Write(matrix[i, j]);
//    }
//    Console.WriteLine();
//}
Console.WriteLine("totalLoop: " + totalLoop);
Console.WriteLine("total: " + total);
Console.WriteLine("== END ==");


static bool ShouldContinue(int positionX, int rowCount, int positionY, int colCount)
{
    return positionX != 0 && positionX < (rowCount - 1) && positionY != 0 && positionY < (colCount - 1);
}